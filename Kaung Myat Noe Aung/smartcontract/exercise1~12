pragma solidity ^0.8.0;
contract Factory { //exercise 1
    uint idDigits=16; //exercise2
    uint idModulus=idDigits**10; //exercise3
    
    struct Product { //exercise 4
        string name;
        uint id;
    }
    Product[] public products; //exercise 5
    function createProduct(string memory _name, uint _id) public{ //exercise 6
        products.push(Product(_name, _id));
    }
    function _generateRandomId(string memory _str) private view returns (uint){ //exercise 7
        uint rand = uint(keccak256(abi.encodePacked(_str))); //exercise 8
        return rand % idModulus; 
    }
    function createRandomProduct (string memory _name) public{
        uint randId = _generateRandomId(_name);
        createProduct(_name, randId);
    }
    event Newproduct(uint productId, string name, uint id);

    function _createProduct(string memory _name, uint _id) public {//exercise 9
    uint randId = _generateRandomId(_name);
    products.push(Product(_name, randId));
    uint productId = products.length - 1;
    emit Newproduct(productId, _name, randId);
    }
    mapping (uint => address) public productToOwner; //exercise 10
    mapping (address => uint) public ownerProductCount;
    function Ownership(uint _productId)public { //exercise 11
        productToOwner[_productId]=msg.sender;
        ownerProductCount[msg.sender]++;
    }
    function getProductsByOwner (address _owner) external view returns (uint[] memory) { //exercise12
    uint counter = 0;
    uint[] memory result = new uint[](ownerProductCount[_owner]);
    for (uint i = 0; i < products.length; i++) {
        if (productToOwner[i] == _owner) {
            result[counter] = i;
            counter++;
        }
    }
    return result;
}
}


