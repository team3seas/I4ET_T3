pragma solidity >=0.5.0 <0.8.0;

contract Factory {
    uint idDigits = 16;
    uint idModulus = 10 ** idDigits;

    struct Product {
        string name;
        uint id;
    }

    Product[] public products;

    mapping (uint => address) public productToOwner;
    mapping (address => uint) ownerProductCount;

    event NewProduct(uint indexed ArrayProductId, string name, uint id);

    function _generateRandomId(string memory _str) private view returns (uint) {
        uint rand = uint(keccak256(abi.encodePacked(_str)));
        return rand % idModulus;
    }

    function _createProduct(string memory _name, uint _id) private {
        Product memory newProduct = Product(_name, _id);
        uint productId = products.push(newProduct) - 1;
        productToOwner[productId] = msg.sender;
        ownerProductCount[msg.sender]++;
        emit NewProduct(productId, _name, _id);
    }

    function createRandomProduct(string memory _name) public {
        uint randId = _generateRandomId(_name);
        _createProduct(_name, randId);
    }
}
